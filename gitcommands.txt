
GIT

>> mkdir git_repo
>> cd git_repo
>> git init
>> 
Here we are downloading gti from > ww.git-scm-linux.com
Also, we are using vscode here to write script,

> Create folder 
> Create index.html
>> type html.5 > and get the default code.
Confiure GIT with Username and Email
>> $ git config --global user.name "Tan Lo"
>> $ git config --global user.email tanlon@yahoo.com

>> $ git config --list

--------------------------
bash
This application requires the Windows Subsystem for Linux Optional Component.
Install it by running: wsl.exe --install --no-distribution
------------------------------------------
>> Creating first Git repo
>> git init : as we created the folder named git_repo, so we need to tell git or Version Control Sytem to check and Track this GIT_folder files/

-----------------------------
>> First GIT commit
>> created one file > indexhtml >> with git add >> we are mentioning to trak the index.hmlfile

>> git add index.html
>> git status
>> git commit -m "First v1 of index.html"  ## We are now working on main branch that is "master" branch only.
>> git branch
>>

----------------------------
What is GIT Commit ?
>> A git is a command in Git that capures a snapshot of the project's currently staged changes, creating a permanent record in the repository's history.

>> "Git" is like Camera Man >> and "Staging" means a Group of people comes prepared on stage for Photo Shoot >> and when the Camea man clicks or takes photo is the "sFinal Commit".
>> git staging area >> helps us to understand the added file, if it is correcctor not or howamny files been affecting, etc... > It gives us a checking point for file before commit..

> git add 
> git commit 
> git checkout

>> If we do any changes to the code, and run >> git status >> we get modified : index.html

>> git diff : we get the difference between the old file and Modified file.(or what we make changes)

>> git add index.html
>> git status
>> git commit -m "This is v2 commit"
>> git log

# Do again dome changes, save it..
>> git add index.html
>> git status
>> git commit -m "This version 'n' of index.html"
>> git log  ## to check if the new Modified file is commited or not.
> Copy the commit number from git logs,..
>> git show 022356b832b8a44a76de23f92a41e870622b6155:index.html   ## To check which version of file in the first commit.
** but this method is not reliable to check previous version or first commmit files more than one) and also ifthe file ishaving 1000 lines of code then as well we not able to check it in terminal (not convenient).

---------------------------------------------------

## Get old version with Git Checkout:
# in orer to get the first version of file ?
>> git log
>> git checkout 022356b832b8a44a76de23f92a41e870622b6155 -- *  ## Here it will load the previous version, or the first committed file , then we can compare, read, check, find difference and after that we return back to the current branch working file using below command (here we have only One file, so after mentioning '*' we are getting only one file.)

>> git checkout master -- *  ## To come back to the latest version of the file..

>> git status
----------------------------------------------------

** Working with Git Restore :

>> as we have to take care, as it is having production ready files availabe, and if we have saved any changesand we are unaware of thosse changes,, >> then how to handle such situations..

### We have Negative Test Cases to check for errors or changes as well//
---------------------------------
@@ Negative Cases:

>> If we made any change by mistake and saved it the how to recover it ?.
Case1: To undo changes, get the last successful change
git restore . or (filename (. mean all files))

Case2: If we added the changes using git and then..
git restore --staged <file_path> # To unstage
git restore <file_path> # To discard changes in the working directory

-----------------------------------
For Case 1:
>> git restore . or all or index.html

For Case 2:
>> if have any in staging area, have any mistakes, which need to coorect, then follow below commnds :

After making changes or mistakes in the code..
If we do .. 
>> git add index.html
then after performing, 
>> git diff --cached
we get what changes we made and then we need to restore it, using below command,
>> git restore --staged .
>> git status
In Current working Directory
>> git restore .
>> git status

--------------------------
@@ Negative Cases:

>> If we made any change by mistake and saved it.

Case3 : Added changes to staging area (didn't commit) after this added more changes to file..
// To get the staged changes
git restore --worktree index.html

Case4: How about if we did commit also wrong files..
git reset --soft HEAD^ (uncommit and keep the changes)
git reset --hard HEAD^ (uncommit and discard the changes)

--------------------------------------
For Case 3:
After making some mistakes in code//
>> git add index.html
>> git status
After making some mistakes, again in code//
>> git restore --worktree .
>> git commit -m "Next commitv4"
----------------------------
For Case 4: If we made mistake in any of the code and also submitted file mistakenly then > hoe to recover ?
>> Working with GIT Reset :
>> git reset --soft HEAD^
>> git reset --hard HEAD^

--------------------------
==========================
git diff --committed
error: invalid option: --committed
usage: git diff [<options>] [<commit>] [--] [<path>...]
   or: git diff [<options>] --cached [--merge-base] [<commit>] [--] [<path>...]
   or: git diff [<options>] [--merge-base] <commit> [<commit>...] <commit> [--] [<path>...]
   or: git diff [<options>] <commit>...<commit> [--] [<path>...]
   or: git diff [<options>] <blob> <blob>
   or: git diff [<options>] --no-index [--] <path> <path>

common diff options:
  -z            output diff-raw with lines terminated with NUL.
  -p            output patch format.
  -u            synonym for -p.
  --patch-with-raw
                output both a patch and the diff-raw format.
  --stat        show diffstat instead of patch.
  --numstat     show numeric diffstat instead of patch.
  --patch-with-stat
                output a patch and prepend its diffstat.
  --name-only   show only names of changed files.
  --name-status show names and status of changed files.
  --full-index  show full object name on index lines.
  --abbrev=<n>  abbreviate object names in diff-tree header and diff-raw.
  -R            swap input file pairs.
  -B            detect complete rewrites.
  -M            detect renames.
  -C            detect copies.
  --find-copies-harder
                try unchanged files as candidate for copy detection.
  -l<n>         limit rename attempts up to <n> paths.
  -O<file>      reorder diffs according to the <file>.
  -S<string>    find filepair whose only one side contains the string.
  --pickaxe-all
                show all files diff when -S is used and hit is found.
  -a  --text    treat all files as text.   << Check this..
==========================
---------------------------
>> Logging in GIT
###################
>> Useful Log Options:
* git log -p -2 (last two commit with diff)
* git log --stat (summary of changes)

* git log --pretty=oneline
* git log --pretty=format:"%h - %an, %ar : %s"

* git log -S function_name (anyfunction name, version name or any header name,etc)

--------------------------------------------
* git log --pretty=format:"%h - %an, %ar : %s"
output of >> git show 8df413:index.html
>> git log -S "h1"
>> git log -S "v3"

---------------------------------------

## Useful Log options:
* git log --grep="fix bug" (search commit msg)

* git log --since="2024-01-01"   # to check commits done across many years
* git log --until="2024-01-01"

* git log --author="Tan"   # to check commits done by specific author
* git log --no-merges

------------------------------------------
(51:41) --timeline

git log --grep="version"
---------------------------
>> Working with Remote Repository:
## Remote Repo :
>> We will check Github for remote repo :

Quick setup — if you’ve done this kind of thing before

…or create a new repository on the command line
echo "# git_demo1" >> README.md
git init
git add README.md
git commit -m "first commit"
git branch -M main
git remote add origin https://github.com/TanAruLon/git_demo1.git
git push -u origin main

…or push an existing repository from the command line
git remote add origin https://github.com/TanAruLon/git_demo1.git
git branch -M main
git push -u origin main
-------------------------------------------------

>> Flow for GIT Push:

After making any changes we can perform folloing steps:
1) git add <filename>
2) git status
3) git commit -m "This version1"
4) git push

--------------------------------
>> Flow for GIT Push:
git remote
git remote -v

----------------------------------
>> Understand GIT Pull:
Means : we are pulling latest change to local..
>> git pull
>> git log

-------------------------------

>> Quick Summary of GIT commands:
1) Git status : To check for any change in the repo.
2) Git diff : To see the difference of current version with last committed version.
3) Git pull : To fetch the latest files from remote repo.
4) Git add : To add the modified files in staging area.
5) Git commit : To add the changes in git repo
6) Git push : To push the committed changes in Remote repo.
7) Git log : To see the old commits history
8) Git show <Commit Number>:<filename or *.html (will not work)> : to check particular version of file from git logs ...
9) Git remote :
10) Git branch :
11) git restore <filename or number of files>:
12) Git reset --soft or --hard

-------------------------------------------------
>> We started CentOS Hyper-V
and then we cloned the newly created git_repo to our CentOS VM.
>> mkdir /Gitt1
>> cd Gitt1
>> git clone https://github.com/TanAruLon/git_demo1.git
>> git status
>> git log
>> git show <Commit Number>:<filename or *.html (will not work)> : to check particular version of file from git logs ...
>> after that if we made any changes to the remote Git repository agin after downloading..
>> then to pull the latest code (of changes made) we use >> git pull only
>> git pull

----------------------------------
==============================
Troubleshooting commands:
1) git reset --soft
2) git reset --hard
3) git diff --cached
4) ...
==================

